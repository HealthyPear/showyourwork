# Require Snakemake >= this version
from snakemake.utils import min_version
min_version("6.7.0")


# Workflow report template
report: "report/workflow.rst"


# Figure out absolute and relative paths to everything
include: "rules/paths.py"


# Import our helper functions
from helpers.exceptions import ShowyourworkException
from helpers.zenodo import get_id_type


# Import config, constants, and error codes used by the rules
include: "rules/config.py"
include: "rules/files.py"
include: "rules/errors.py"


# Import miscellaneous functions used by the rules
include: "rules/git.py"
include: "rules/functions.py"


# Collect information on all Zenodo datasets and
# generate rules to upload/download them dynamically
include: "rules/zenodo.py"
for dynamic_rule in dynamic_rules:
    include: posix(abspaths.temp / f"{dynamic_rule}.smk")


# Define all the rules
include: "rules/repo.smk"
include: "rules/aux_file.smk"
include: "rules/tectonic.smk"
include: "rules/class_name.smk"
include: "rules/class_file.smk"
include: "rules/tmptexfile.smk"
include: "rules/xml.smk"
include: "rules/script_info.smk"
include: "rules/metadata.smk"
include: "rules/figure.smk"
include: "rules/texfile.smk"
include: "rules/stylesheet.smk"
include: "rules/pdf.smk"
include: "rules/arxiv.smk"


# Zenodo rules
# TODO: There may be ambgiuities we need to resolve here
include: "rules/download.smk" # TODO: Should these be dynamically generated?
include: "rules/generate.smk"
include: "rules/upload.smk"
include: "rules/remove_zenodo.smk" # TODO: rethink this logic


# Rule for autogenerating rule documentation
include: "rules/docstrings.smk"
try:
    # Always include conditional rules when building the docs
    assert __sphinx_docs_build__
    include: "rules/download_manual.smk"
    include: "rules/download_ci.smk"
    include: "rules/generate.smk"
    include: "rules/upload.smk"
except:
    pass


# Attempt to print an informative error message at the end of the build log
onerror:
    ShowyourworkException.print()