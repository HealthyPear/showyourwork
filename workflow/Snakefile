import snakemake
from pathlib import Path
import sys


# Require Snakemake >= this version
snakemake.utils.min_version("6.7.0")


# Add our utils module to the path
HERE = Path(snakemake.workflow.workflow.current_basedir).absolute()
sys.path.insert(1, str(HERE.parents[0]))
from utils import paths, setup_logging, add_snakemake_settings_to_config, clear_errors, get_logger


# Working directory is the top level of the user repo
workdir: paths.user.as_posix()


# The configfile is autogenerated by the `preprocess.smk` workflow
if (paths.temp / "config.json").exists():


    # Load the autogenerated config
    configfile: (paths.temp / "config.json").as_posix()


    # Workflow report template
    report: "report/workflow.rst"


    # Clear errors from past builds
    clear_errors()


    # Add select command line options to the config dict
    # so we can mimic some of the Snakemake behavior
    add_snakemake_settings_to_config()


    # Set up custom logging
    setup_logging(
        debug=config["debug"], 
        verbose=config["verbose"], 
        logfile=paths.logs / "compile.log"
    )


    # Hack to make the pdf generation the default rule
    rule main:
        input:
            config["ms_pdf"]


    # Include all other rules
    include: "rules/pdf.smk"
    include: "rules/figure.smk"


    # Include custom rules defined by the user
    usr_snakefile = (paths.user / "Snakefile").as_posix()
    include: usr_snakefile


    # Give all user rules higher priority than showyourwork rules
    # and add a message if they don't have one
    syw_rules = []
    usr_rules = []
    for r in workflow.rules:
        if r.snakefile == usr_snakefile:
            usr_rules.append(r)
        else:
            syw_rules.append(r)
    for ur in usr_rules:
        for sr in syw_rules:
            workflow.ruleorder(ur.name, sr.name)
        if not ur.message:
            ur.message = f"Running user rule {ur.name}..."

onsuccess:
    get_logger().info("Done!")
