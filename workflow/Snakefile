import snakemake
from pathlib import Path
import sys


# Require Snakemake >= this version
snakemake.utils.min_version("6.7.0")


# Add our utils module to the path
HERE = Path(snakemake.workflow.workflow.current_basedir).absolute()
sys.path.insert(1, str(HERE.parents[0]))
from utils import (
    paths,
    setup_logging,
    parse_config,
    clear_errors,
    get_logger,
    exceptions,
    is_make_clean,
    get_deps_hash,
    process_user_rules,
)


# Working directory is the top level of the user repo
workdir: paths.user.as_posix()


# The configfile is autogenerated by the `preprocess.smk` workflow
if (paths.temp / "config.json").exists():


    # Load the autogenerated config
    configfile: (paths.temp / "config.json").as_posix()


    # Workflow report template
    report: "report/workflow.rst"


    # Clear errors from past builds
    clear_errors()


    # Parse the config file
    parse_config()


    # Set up custom logging
    setup_logging(
        debug=config["debug"], 
        verbose=config["verbose"], 
        logfile=paths.logs / "compile.log"
    )


    # Hack to make the pdf generation the default rule
    rule main:
        input:
            config["ms_pdf"]


    # Include all other rules
    include: "checkpoints/blocking.smk"
    include: "rules/pdf.smk"
    include: "rules/zenodo.smk"
    include: "rules/figure.smk"


    # Include custom rules defined by the user
    user_snakefile = (paths.user / "Snakefile").as_posix()
    include: user_snakefile
    process_user_rules(user_snakefile)


else:


    if not is_make_clean():
        raise exceptions.MissingConfigFile()


onsuccess:


    get_logger().info("Done!")
