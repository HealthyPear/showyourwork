from showyourwork import paths, exceptions, overleaf
from showyourwork.patches import patch_snakemake_wait_for_files
from showyourwork.config import parse_config, is_make_clean, is_make_main
from showyourwork.logging import setup_logging, get_logger, clear_errors
from showyourwork.userrules import process_user_rules
import snakemake
import sys
import os
import jinja2


# Require Snakemake >= this version
snakemake.utils.min_version("6.15.5")


# Working directory is the top level of the user repo
workdir: paths.user().repo.as_posix()


# The configfile is autogenerated by the `preprocess.smk` workflow
if (paths.user().temp / "config.json").exists():


    # Load the autogenerated config
    configfile: (paths.user().temp / "config.json").as_posix()


    # Workflow report template
    report: "report/workflow.rst"


    # Clear errors from past builds
    clear_errors()


    # Parse the config file
    parse_config()


    # Set up custom logging
    setup_logging(
        verbose=config["verbose"], 
        logfile=paths.user().logs / "compile.log"
    )


    # Hack to make the pdf generation the default rule
    rule syw__main:
        input:
            config["ms_pdf"]


    # Wrap the tarball generation rule to ensure tempfiles are properly
    # deleted; this is the rule we actually call from the Makefile
    rule syw__arxiv_entrypoint:
        input:
            "arxiv.tar.gz"


    # Include all other rules
    include: "checkpoints/dag.smk"
    include: "rules/arxiv.smk"
    include: "rules/compile.smk"
    include: "rules/zenodo.smk"
    include: "rules/figure.smk"


    # Resolve ambiguities in rule order
    ruleorder: syw__compile > syw__arxiv


    # Include custom rules defined by the user
    include: (paths.user().repo / "Snakefile").as_posix()
    process_user_rules()


    # Hack to display a custom message when a figure output is missing
    patch_snakemake_wait_for_files()


else:


    if not is_make_clean():
        raise exceptions.MissingConfigFile()


onstart:

    
    # Overleaf sync: pull in changes
    if is_make_main():
        overleaf.pull_files(
            config["overleaf"]["pull"], 
            config["overleaf"]["id"], 
            auto_commit=config["overleaf"]["auto-commit"] and config["github_actions"]
        )


onsuccess:


    # Overleaf sync: push changes
    if is_make_main():
        overleaf.push_files(config["overleaf"]["push"], config["overleaf"]["id"])


    # We're done
    get_logger().info("Done!")
