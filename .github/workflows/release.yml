name: release

on:
  workflow_dispatch:
    inputs:
      release_type:
        # major, premajor, minor, preminor, patch, prepatch, or prerelease
        description: "Release type"
        required: true
        default: "patch"

jobs:
  showyourwork:
    runs-on: ubuntu-latest
    name: Release
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install node packages
        run: npm install semver

      - name: Bump version
        uses: actions/github-script@v4
        id: bump
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release_type }}
        with:
          result-encoding: string
          script: |
            // Import modules
            const semver = require("semver");

            // Get all tags
            const tags = await github.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // Get latest version
            var latest = "0.0.0";
            for (let i = 0; i < tags.data.length; i++) {
              const tag = tags.data[i].name;
              if ((tag[0] == "v") && semver.valid(tag.slice(1))) {
                if (semver.gt(tag.slice(1), latest)) {
                  latest = tag.slice(1);
                }
              }
            }

            // Bump the version
            latest = semver.inc(latest, RELEASE_TYPE);
            if (latest == null) {
              core.setFailed(`Invalid release type: ${RELEASE_TYPE}`);
            }

            // Replace version in docs link in README
            await exec.exec("sed", ["-i", "-E", `s|<a href=\"https://showyourwork.readthedocs.io/en/(.*)\">|<a href=\"https://showyourwork.readthedocs.io/en/v${latest}\">|g`, "README.md"]);

            // Push to repo
            await exec.exec("git", ["add", "README.md"]);
            await exec.exec("git", ["-c", "user.name='gh-actions", "-c", "user.email='gh-actions'", "commit", "-m", `[skip ci] Update docs link to $v{latest}`]);
            await exec.exec("git", ["push", "origin", "main"]);

            // Create release w/ new version
            await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${latest}`
            });

            // Return new version
            return `v${latest}`;

      - name: Update template-minimal
        id: template-minimal
        if: steps.bump.outcome == 'success'
        shell: bash -l {0}
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          USER: rodluger
          REPO: showyourwork-template-minimal
        run: ./.github/workflows/update_template.sh
