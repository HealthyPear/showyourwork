.. raw:: html

    <style>
        li p {
            margin-bottom: 0px;
        }
    </style>

The ``showyourwork.yml`` config file
====================================

This is the configuration file for ``showyourwork``, allowing you to
customize several aspects of the workflow. Below is a list of all
available options.


``dependencies``
^^^^^^^^^^^^^^^^

**Type:** ``list``

**Description:** List of dependencies for each script. Each entry should be 
the path to a script (either a figure script or the TeX manuscript itself) 
relative to the repository root. Following each entry, provide a list of 
all files on which the script depends. These dependencies may either be
static (such as helper scripts) or programmatically generated (such as
datsets downloaded from Zenodo). In the latter case, instructions on how
to generate them must be provided elsewhere (either via the ``zenodo`` key
below or via a custom ``rule`` in the ``Snakefile``). In both cases, changes
to the dependency will result in a re-run of the section of the workflow that
executes the script.

**Required:** no

**Default:** ``[]``

**Example:**
Tell ``showyourwork`` that the figure script ``my_figure.py`` depends on
the helper script ``utils/helper_script.py``:

.. code-block:: yaml

  dependencies:
    src/scripts/my_figure.py:
      - src/scripts/utils/helper_script.py

You can also specify a dependency on a programmatically-generated file:

.. code-block:: yaml

  dependencies:
    src/scripts/fibonacci.py:
        - src/data/fibonacci.dat

provided ``data/fibonacci.dat`` is defined in a ``zenodo`` deposit (see below)
or instructions for generating it are provided in the ``Snakefile``.

Finally, dependencies of the manuscript file are also allowed:

.. code-block:: yaml

  dependencies:
    src/ms.tex:
        - src/answer.tex


``ms``
^^^^^^

**Type:** ``str``

**Description:** Path to the main TeX manuscript. Change this if you'd prefer to
name your manuscript something other than ``src/tex/ms.tex``. Note that you should still
keep it in the ``src/tex`` directory. Note also that the compiled PDF file will
have the same name (e.g., ``src/tex/article.tex`` will generate ``article.pdf``
in the repository root) .

**Required:** no

**Default:** ``src/tex/ms.tex``

**Example:**

.. code-block:: yaml

  ms: src/tex/article.tex


``overleaf``
^^^^^^^^^^^^

**Type:** ``mapping``

**Description:** Settings pertaining to Overleaf integration. See below for
details.

**Required:** no

**Example:**

.. code-block:: yaml

    overleaf:
        id: 62150dd16134ef045f81d1c8
        auto-commit: true
        push: 
            - src/tex/figures
        pull:
            - src/tex/ms.tex
            - src/tex/bib.bib


``overleaf.auto-commit``
^^^^^^^^^^^^^^^^^^^^^^^^

**Type:** ``bool``

**Description:** Auto-commit and push incoming changes from the Overleaf project when
running on GitHub Actions?

**Required:** no

**Default:** false

**Example:**

.. code-block:: yaml

    overleaf:
        auto-commit: false


``overleaf.id``
^^^^^^^^^^^^^^^

**Type:** ``str``

**Description:** The id of the Overleaf project to integrate with. This can
be obtained from the URL of the project:

.. code-block:: bash

    https://www.overleaf.com/project/6262c032aae5421d6d945acf

in this case, the id is `6262c032aae5421d6d945acf`.

.. warning::

    Please read the :doc:`Overlaf <overleaf>` integration docs before
    manually adding/changing this value, as you could risk losing
    changes to your local document or to your Overleaf document the
    next time you build!

**Required:** no

**Example:**

.. code-block:: yaml

    overleaf:
        id: 62150dd16134ef045f81d1c8


``overleaf.pull``
^^^^^^^^^^^^^^^^^

**Type:** ``bool``

**Description:** A list of files to be pulled from the Overleaf project upon
every build. These should be files which are only ever modified on Overleaf, such as 
the TeX manuscript and other TeX files.

**Required:** no

**Default:** ``[]``

**Example:**

.. code-block:: yaml

    overleaf:
        pull:
            - src/tex/ms.tex
            - src/tex/bib.bib


``overleaf.push``
^^^^^^^^^^^^^^^^^

**Type:** ``bool``

**Description:** 

**Required:** no

**Default:** ``[]``

**Example:**

.. code-block:: yaml

    overleaf:
        push:
            - src/tex/figures


.. _config_scripts:

``scripts``
^^^^^^^^^^^

**Type:** ``mapping``

**Description:** Mapping of script extensions to instructions on how to execute 
them to generate output. By default, ``showyourwork`` expects output files
(e.g., figures or datasets) to
be generated by executing the corresponding scripts with ``python``. You can add custom
rules here to produce output from scripts with other extensions, or change
the behavior for executing ``python`` scripts (such as adding command line
options, for instance). Each entry under ``scripts`` should be a file extension,
and under each one should be a string specifying how to generate the output file
from the input script. The following placeholders are recognized by ``showyourwork``
and expand as follows at runtime:

- ``{script}``: The full path to the input script.
- ``{output}``: The full path to the output file (i.e., the generated figure). If the script generates more than one file, this expands to a space-separated list of outputs.
- ``{datasets}``: A space-separated list of all the Zenodo datasets required by the current script.
- ``{dependencies}``: A space-separated list of all the dependencies (including datasets) of the current script.

**Required:** no

**Default:** The default behavior for ``python`` scripts corresponds to the
following specification in the ``yaml`` file:

.. code-block:: yaml

  scripts:
    py:
      python {script}

That is, ``python`` is used to execute all scripts that end in ``.py``. 

**Example:**
We can tell ``showyourwork`` how to generate figures by executing a Jupyter
notebook as follows:

.. code-block:: yaml

  scripts:
    ipynb:
      jupyter execute {script}


``showyourwork``
^^^^^^^^^^^^^^^^

**Type:** ``mapping``

**Description:** A block automatically generated by ``showyourwork setup``
containing internal settings. Users shouldn't typically have to edit anything within
this block.

**Required:** yes

**Example:**

.. code-block:: yaml

  showyourwork:
    version: 1.0.1
    cache:
        zenodo: 6471264


``showyourwork.cache``
^^^^^^^^^^^^^^^^^^^^^^

**Type:** ``mapping``

**Description:** Container for cache-related settings.

**Required:** no


``showyourwork.version``
^^^^^^^^^^^^^^^^^^^^^^^^

**Type:** ``str``

**Description:** The version of the ``showyourwork`` package required to build
the article, populated automatically when ``showyouwork setup`` is run. Users
may, however, change this to upgrade/downgrade to a different version of the
package. Options are (from most recommended to least recommended): 

- any pip-installable version number (e.g., ``1.0.1``)
- a 5-character (short) or 40-character (long) GitHub commit SHA (e.g, ``abcde``) corresponding to a specific commit to the `<github.com/showyourwork/showyourwork>`_ repo
- the string ``latest`` (for the latest commit on GitHub)
- the absolute path to a local installation of ``showyourwork``.

**Required:** yes

**Example:**

.. code-block:: yaml

  showyourwork:
    version: 1.0.1



``showyourwork.cache.zenodo``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Type:** ``str`` or ``int``

**Description:** The concept id of the Zenodo deposit used to cache intermediate
steps in the workflow. This value is populated by ``showyourwork setup`` and
should not generally be edited by the user. See :doc:`zenodo` for details.

**Required:** no

**Example:**

.. code-block:: yaml

  showyourwork:
    cache:
        zenodo: 6471264


``verbose``
^^^^^^^^^^^

**Type:** ``bool``

**Description:** Enable verbose output? Useful for debugging runs.

**Required:** no

**Default:** ``false``

**Example:**

.. code-block:: yaml

  verbose: true


.. _zenodo_key:

``zenodo``
^^^^^^^^^^

**Type:** ``list``

**Description:** A list of datasets to be download from and/or uploaded to
Zenodo. Each entry should be the path to a dataset, followed by keys
specifying information about the Zenodo deposit. These keys depend on the use
case. If the deposit already exists (i.e., it was uploaded manually), then
users should only specify the deposit *version* :ref:`id <zenodo.dataset.id>`. 
If the deposit does not exist, and users would like ``showyourwork`` to upload 
it/download it from Zenodo, they should specify the deposit *concept*
:ref:`id <zenodo.dataset.id>` instead (see :ref:`id <zenodo.dataset.id>` below for
more details).
Additionally, users should specify the following keys 
(most of which are optional): :ref:`script <zenodo.dataset.script>`,
:ref:`title <zenodo.dataset.title>`,
:ref:`description <zenodo.dataset.description>`,
and :ref:`creators <zenodo.dataset.creators>`.
Finally, if the deposit is a tarball consisting of many datasets, users should
also specify the tarball :ref:`contents <zenodo.dataset.contents>`.
In both cases (manually uploaded and ``showyourwork``-managed datasets),
a :ref:`token_name <zenodo.dataset.token_name>` key is also accepted.

.. note::

    For ``showyourwork``-managed datasets, the ``script`` that generates the
    dataset will be executed when running the workflow locally (but only if there
    are changes to the dataset's dependencies).
    When running on GitHub Actions, on the other hand, the script will **never** be
    executed; instead, ``showyourwork`` will always download the dataset from
    Zenodo. The idea here is to prevent the workflow from executing expensive
    operations on the cloud. In order for this to work, however, a deposit must
    exist, so you must run your workflow at least once locally before pushing
    the changes to GitHub.

**Required:** no

**Default:** ``[]``

**Example:**
See :ref:`custom_dataset_deps`,
:ref:`custom_simulation_deps`,
:ref:`custom_tarballs`,
and
:ref:`custom_tarballs_advanced`.


.. _zenodo.dataset.contents:

``zenodo.<dataset>.contents``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Type:** ``list``

**Description:** If ``<dataset>`` is a ``.tar.gz`` file, users should provide
a list of the contents of the tarball. 
If this is a static tarball that was manually uploaded to Zenodo 
(i.e., the provided ``id`` is a version id), this should be a list of full
paths to the files to be created when the tarball is extracted.
See below for details.
If, on the other hand, this tarball is managed by
``showyourwork`` (i.e., the provided ``id`` is a concept id), this should be 
a list of the full paths of all the files to include in the tarball.
These should be located in the ``src/data`` folder (or nested within it).
Note that instructions for generating these individual files
should be provided separately, either via the :ref:`script <zenodo.dataset.script>`
key or via a custom ``rule`` in the ``Snakefile``.

For static tarballs, users need to be careful when providing file paths.
``showyourwork`` will extract the tarball from the top-level directory of your
repository and attempt to generate all of the files listed in ``contents``,
either by respecting the file path within the tarball or by treating it as a
path relative to the ``src/data`` directory.

For example, consider the Zenodo-hosted file ``results.tar.gz``, whose contents
are

.. code-block::

  src/data/results.tar.gz
    ├── src/data/results_00.dat
    └── src/data/results_01.dat
    
We can specify the following settings for it in ``showyourwork.yml``:

.. code-block:: yaml

  zenodo:
    - src/data/results.tar.gz:
        contents:
            - src/data/results_00.dat
            - src/data/results_01.dat

which will unpack the files ``results_00.dat`` and ``results_01.dat`` into the
``src/data`` folder. In this case, the source and destination paths are the same
(i.e., the path inside the tarball is the path we extract the files to). But
things will also work if we have a tarball with purely relative paths:

.. code-block::

  src/data/other_results.tar.gz
    ├── other_results_00.dat
    └── other_results_01.dat

and we specify the following in ``showyourwork.yml``:

.. code-block:: yaml

  zenodo:
    - src/data/other_results.tar.gz:
        contents:
            - src/data/other_results_00.dat
            - src/data/other_results_01.dat

In this case, the source and destination paths are different, but ``showyourwork``
knows how to handle it. 

Note that if you have files within nested folders inside your tarball, things
should still work as long as you extract them into the ``src/data`` directory.
Note that there is no need to specify the nested directories in ``contents``:
just the full path to the files; intermediate directories will be created as needed.

**Required:** yes, but only if ``<dataset>`` is a ``.tar.gz`` tarball.

**Default:**

**Example:**
See :ref:`custom_tarballs`.


.. _zenodo.dataset.creators:

``zenodo.<dataset>.creators``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Type:** ``list``

**Description:** A list of creators to be listed on the Zenodo record and associated
with the record DOI.

**Required:** no

**Default:** The GitHub username of the current user

**Example:**
See :ref:`custom_simulation_deps`.


.. _zenodo.dataset.description:

``zenodo.<dataset>.description``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Type:** ``str``

**Description:** A detailed description of the file, how it was generated, and
how it should be used, to be displayed on the Zenodo record page.

**Required:** no

**Default:** ``"File uploaded from <repository-name>"``

**Example:**
See :ref:`custom_simulation_deps`.


.. _zenodo.dataset.id:

``zenodo.<dataset>.id``
^^^^^^^^^^^^^^^^^^^^^^^

**Type:** ``int``

**Description:** A Zenodo ``id`` for a given deposit is the last part of its DOI. For example,
a deposit with DOI ``10.5281/zenodo.5749987`` has ``id`` equal to ``5749987``.
This is also the last part of the url for the corresponding record
(`<https://zenodo.org/record/5749987>`_). Importantly, Zenodo makes a distinction 
between *version* DOIs and *concept* DOIs. Version DOIs are static, and tied
to a specific version of a deposit (the way you'd expect a DOI to behave).
This is the type of ``id`` you should provide if you manually uploaded a dataset
to Zenodo and only ever want ``showyourwork`` to download it.
Concept DOIs, on the other hand, point to *all* versions of a given record,
and always resolve to the *latest* version. If you want ``showyourwork``
to manage the dataset for you by generating it, uploading it, and downloading
it, this is the kind of ``id`` you should provide.
Check out the sidebar on the 
`web page for the deposit in the example above <https://zenodo.org/record/5749987>`_:

.. raw:: html

    <div align="center" style="margin-bottom: 17.25px;">
        <img src="https://raw.githubusercontent.com/rodluger/showyourwork/img/dois.png" width="40%"/>
    </div>

You can see that the ``id`` ``5749987`` corresponds to a specific version (``19``)
of the deposit, while the ``id`` ``5662426`` corresponds to *all* versions of
the deposit (it's listed under "Cite all versions?"). 
The former is a "version" id, while the latter is a "concept" id.
You can read more about that in the `Zenodo docs <https://help.zenodo.org/#versioning>`_.

.. note::

  If you're just getting started and want a concept ``id`` for a fresh draft
  of a new Zenodo deposit, run

  .. code-block:: bash

    make reserve

  .. raw:: html

    <br>

  from the top level of your repo. This will pre-reserve a concept ``id`` for
  you (assuming you're properly authenticated) and print it to the terminal.

**Required:** yes

**Default:** 

**Example:**
The following snippet

.. code-block:: yaml

  zenodo:
    - src/data/results.tar.gz:
        id: 5749987

tells ``showyourwork`` to download the file ``results.tar.gz`` from
the static Zenodo deposit at `<https://zenodo.org/record/5749987>`_ 
(version 19 of the deposit, as mentioned above). This file must already
exist, and ``showyourwork`` won't ever attempt to re-generate it or
re-upload it to Zenodo because it recognizes ``5749987`` as a *version* id.

.. raw:: html

    <br>

Alternatively, we could specify the following:

.. code-block:: yaml

  zenodo:
    - src/data/results.tar.gz:
        id: 5662426
        script: src/analysis/generate_results.py

In this case, the ``id`` is a *concept* id, corresponding to all versions of
the deposit, and ``showyourwork`` will take over management of the deposit.
Note that we also provided a ``script`` instructing ``showyourwork`` how to
generate new versions of the deposit. Whenever ``generate_results.py`` or
any of its dependencies are modified, ``showyourwork`` will re-generate 
``results.tar.gz`` **and re-upload it to Zenodo under the same concept id**
when running the workflow locally.
This will create a new version DOI under the same concept DOI.
Note that in order for this to work, you must be properly authenticated;
see :ref:`token_name <zenodo.dataset.token_name>` below.
For a more detailed example, see :ref:`custom_dataset_deps`.


.. _zenodo.dataset.script:

``zenodo.<dataset>.script``
^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Type:** ``str``

**Description:** The path to the ``python`` script that generates the ``<dataset>``
(or, if ``<dataset>`` is a tarball, the script that generates its contents).
Note that this *must* be a ``python`` script, even if custom script instructions
are provided via the :ref:`scripts <config_scripts>` key. To define custom rules for
generating the dataset, see the 
:ref:`custom_tarballs_advanced` example.

**Required:** yes, unless a custom ``rule`` is provided in the ``Snakefile``

**Default:**

**Example:**
See :ref:`custom_simulation_deps`.


.. _zenodo.dataset.title:

``zenodo.<dataset>.title``
^^^^^^^^^^^^^^^^^^^^^^^^^^

**Type:** ``str``

**Description:** The title of the Zenodo deposit.

**Required:** no

**Default:** ``"<repository-name>:<dataset>"``

**Example:**
See :ref:`custom_simulation_deps`.


.. _zenodo.dataset.token_name:

``zenodo.<dataset>.token_name``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Type:** ``str``

**Description:** The name of the environment variable containing the
Zenodo access token.
To obtain this token, create a `Zenodo account <https://zenodo.org/signup>`_ 
(if you don't have one already) and
generate a `personal access token <https://zenodo.org/account/settings/applications/tokens/new/>`_.
Make sure to give it at least ``deposit:actions`` and ``deposit:write`` scopes, and store it somewhere
safe. Then, assign your token to an environment variable called ``ZENODO_TOKEN`` (or whatever
you set ``token_name`` to). I export mine from within my ``.zshrc`` or ``.bashrc`` config file so that 
it's always available in all terminals.

.. warning::

    Never include your personal access tokens in any files committed to GitHub!


**Required:** no

**Default:** ``ZENODO_TOKEN``

**Example:**
See :ref:`custom_simulation_deps`.


``zenodo_sandbox``
^^^^^^^^^^^^^^^^^^

**Type:** ``list``

**Description:** A list of datasets to be download from and/or uploaded to
Zenodo Sandbox. This key behaves in the same way and accepts all the same
arguments as the :ref:`zenodo <zenodo_key>` key above, but it interfaces with
`<sandbox.zenodo.org>`_ (instead of `<zenodo.org>`_). Zenodo Sandbox works in
the same way as Zenodo, but is meant for testing purposes only: deposits hosted
in the Sandbox may be deleted at any time. Hosting datasets here is useful
during development of your project; just make sure to switch over to
``zenodo`` when you're ready to publish your paper!

**Required:** no

**Default:** ``[]``

**Example:**
See :ref:`custom_dataset_deps`,
:ref:`custom_simulation_deps`,
:ref:`custom_tarballs`,
and
:ref:`custom_tarballs_advanced`.